
services:
    postgres:
        image: postgres:16
        container_name: bankDB
        restart: always
        environment:
            POSTGRES_USER: fast_api
            POSTGRES_PASSWORD: root
            POSTGRES_DB: bankDB
        ports:
            - "5445:5432"
        volumes:
            - ./.temp_data/.postgres:/var/lib/postgresql/data
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U fast_api -d bankDB" ]
            interval: 30s
            retries: 5
            start_period: 10s
        networks:
            - app_network

    mongo:
        image: mongo:6
        container_name: fileStorage
        restart: always
        environment:
            MONGO_INITDB_ROOT_USERNAME: fast_api
            MONGO_INITDB_ROOT_PASSWORD: root
            MONGO_INITDB_DATABASE: fileStorageDB
        ports:
            - "27018:27017"
        volumes:
            - ./.temp_data/.mongo:/data/db
        networks:
            - app_network

    api:
        build: ./backend
        container_name: bankAPI
        restart: always
        depends_on:
            postgres:
                condition: service_healthy
        environment:
            POSTGRES_HOST: postgres
            POSTGRES_USER: fast_api
            POSTGRES_PASSWORD: root
            POSTGRES_DB: bankDB
            POSTGRES_PORT: 5432
            MONGO_HOST: mongo
            MONGO_PORT: 27017
            MONGO_USER: fast_api
            MONGO_PASSWORD: root
            MONGO_DB: fileStorageDB
            CONTEXT_ENVIRONMENT: docker  # для путей к базам
        ports:
            - "8000:8000"
        volumes:
            # - ./.temp_data/.backend:/app # Для разработки, чтобы изменения сразу применялись
            - ./.temp_data/.pip_cache:/root/.cache/pip  # Volume для кэша pip
        working_dir: /app
        command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
        networks:
            - app_network
        
   
networks:
    app_network:
        driver: bridge
